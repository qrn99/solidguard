import { Process, Processor } from '@nestjs/bull';
import { Job } from 'bull';
import { SendgridService } from '../../email/sendgrid.service';
import { ContractService } from '../../contract/contract.service';
import { SubscribeService } from '../../subscribe/subscribe.service';
import { ExploitNotifyJobDto } from '../dto';
import { ExploitService } from '../exploit.service';
import { UserService } from '../../user/user.service';

@Processor('exploitNotify')
export class ExploitNotifyProcessor {
  constructor(
    private readonly userService: UserService,
    private readonly exploitService: ExploitService,
    private readonly contractService: ContractService,
    private readonly subscribeService: SubscribeService,
    private readonly emailNotificationService: SendgridService
  ) {}

  @Process()
  public async notify(job: Job<ExploitNotifyJobDto>) {
    // get exploit information
    const exploit = await this.exploitService.getExploit(job.data.exploitId);

    // get affected contract addresses
    const contractAddrs = await this.contractService.getAllContractAddrs();
    const affectedContractAddrs =
      await this.contractService.hasEtherscanContractsFromAddrs(
        {
          names: exploit.targetNames,
          addr: exploit.targetAddr,
        },
        contractAddrs
      );

    // pause smart contracts if applicable
    await this.contractService.pauseContracts(affectedContractAddrs);

    // notify users
    const emailsToNotify = await this.getEmailsFromContractAddrs(
      affectedContractAddrs
    );
    // get username of author
    const user = await this.userService.getUserById(exploit.authorUserId);
    const exploitDisplay = { ...exploit, authorName: user.name };
    await this.emailNotificationService.sendEmail(
      emailsToNotify,
      exploitDisplay
    );
  }

  private async getEmailsFromContractAddrs(
    contractAddrs: string[]
  ): Promise<string[]> {
    let emailsToNotify: string[] = [];
    const notifyPromises: Promise<void>[] = [];
    for (const contractAddr of contractAddrs) {
      notifyPromises.push(
        (async () => {
          const emailAddrs = await this.subscribeService.getEmailsByContract(
            contractAddr
          );
          emailsToNotify = emailsToNotify.concat(emailAddrs);
        })()
      );
    }
    await Promise.all(notifyPromises);
    return emailsToNotify;
  }
}
